import express, { type Request, type Response } from "express"
import cors from "cors"
import path from "path"
import helmet from "helmet"
import fileupload from "express-fileupload"

import { FRONTEND_URL, AUTH0_DOMAIN, API_PORT } from "@/config"
import { doHealthCheck } from "@/utils/healthCheck"
import { CreateMigrationRoutes } from "@/data"
import {
  adminRouter,
  dataRouter,
  journalsRouter,
  lookupRouter,
  migrationRouter,
  pdfRouter,
  recoveriesRouter,
  userRouter,
} from "@/routes"
import jwtMiddleware from "@/middleware/jwt-middleware"
import { ensureAndAuthorizeCurrentUser } from "@/middleware/authorization-middleware"
import { emailCronjob } from "@/services/emailcronjob"

import { schedule } from "node-cron"

const app = express()

app.use(express.json({ limit: 20 * 1024 * 1024 * 1024 })) // 20Mb,  for parsing application/json
app.use(express.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded
app.use(fileupload({ limits: { fileSize: 20 * 1024 * 1024 * 1024 } })) //20Mb
//app.use(helmet());
app.use(
  helmet.contentSecurityPolicy({
    directives: {
      "default-src": ["'self'", FRONTEND_URL, AUTH0_DOMAIN],
      "base-uri": ["'self'"],
      "block-all-mixed-content": [],
      "font-src": ["'self'", "https:", "data:"],
      "frame-ancestors": ["'self'"],
      "img-src": ["'self'", "data:", "https:"],
      "object-src": ["'none'"],
      "script-src": ["'self'", "'unsafe-eval'"],
      "script-src-attr": ["'none'"],
      "style-src": ["'self'", "https:", "'unsafe-inline'"],
      "worker-src": ["'self'", "blob:"],
      "connect-src": ["'self'", FRONTEND_URL, AUTH0_DOMAIN],
    },
  })
)

// very basic CORS setup
app.use(
  cors({
    origin: FRONTEND_URL,
    optionsSuccessStatus: 200,
    credentials: true,
  })
)

CreateMigrationRoutes(app)

app.get("/api/healthCheck", (req: Request, res: Response) => {
  doHealthCheck(res)
})

// api routes
app.use("/api", jwtMiddleware, ensureAndAuthorizeCurrentUser)

app.use("/api/user", userRouter)
app.use("/api/admin", adminRouter)
app.use("/api/data", dataRouter)
app.use("/api/lookup", lookupRouter)
app.use("/api/recoveries", recoveriesRouter)
app.use("/api/journals", journalsRouter)
app.use("/api/pdf", pdfRouter)
app.use("/api/migrate", migrationRouter)

// serves the static files generated by the front-end
app.use(express.static(path.join(__dirname, "web")))

// if no other routes match, just send the front-end
app.use((req: Request, res: Response) => {
  res.sendFile(path.join(__dirname, "web") + "/index.html")
})

schedule(
  "0 4 * * *", // run every day at 4:00 AM
  async () => {
    //Running at 4:00AM PDT
    await emailCronjob()
  },
  {
    scheduled: true,
    timezone: "America/Vancouver",
  }
)

app.listen(API_PORT, () => {
  console.log(`API listenting on port ${API_PORT}`)
})
